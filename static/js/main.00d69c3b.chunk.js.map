{"version":3,"sources":["components/NavHeader/NavHeader.tsx","components/MovieCard/MovieCard.tsx","components/CardContainer/CardContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavHeader","className","MovieCard","props","state","rating","cardData","nextValue","this","setState","src","imageUrl","alt","title","subtitle","description","name","starCount","emptyStarColor","value","onStarClick","bind","Component","CardContainer","showDots","responsive","desktop","breakpoint","max","min","items","slidesToSlide","tablet","mobile","infinite","keyBoardControl","customTransition","transitionDuration","containerClass","dotListClass","itemClass","movieList","map","movie","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uiFAYeA,MATf,WACI,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,sBACb,0BAAMA,UAAU,cAAhB,yB,uFC0CGC,E,kDAzCX,WAAYC,GAAkC,IAAD,8BACzC,cAAMA,IACDC,MAAQ,CACTC,OAAQF,EAAMG,SAASD,QAHc,E,wDAOjCE,GACRC,KAAKC,SAAS,CAAEJ,OAAQE,M,+BAGlB,IACED,EAAaE,KAAKL,MAAlBG,SACAD,EAAWG,KAAKJ,MAAhBC,OACR,OACI,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,cAAcS,IAAKJ,EAASK,SAAUC,IAAKN,EAASO,QACnE,yBAAKZ,UAAU,cACX,yBAAKA,UAAU,eAAeK,EAASO,OACvC,yBAAKZ,UAAU,kBAAkBK,EAASQ,UAC1C,yBAAKb,UAAU,qBAAqBK,EAASS,cAEjD,yBAAKd,UAAU,eACX,yBAAKA,UAAU,YACX,kBAAC,IAAD,CACIe,KAAK,QACLC,UAAW,EACXC,eAAgB,OAChBC,MAAOd,EACPe,YAAaZ,KAAKY,YAAYC,KAAKb,QAEvC,yBAAKP,UAAU,cAAcI,W,GAlCjCiB,a,QCsCTC,MArCf,WAkBI,OACI,kBAAC,IAAD,CACIC,UAAU,EACVC,WApBW,CACfC,QAAS,CACLC,WAAY,CAAEC,IAAK,IAAMC,IAAK,MAC9BC,MAAO,EACPC,cAAe,GAEnBC,OAAQ,CACJL,WAAY,CAAEC,IAAK,KAAMC,IAAK,KAC9BC,MAAO,EACPC,cAAe,GAEnBE,OAAQ,CACJN,WAAY,CAAEC,IAAK,IAAKC,IAAK,GAC7BC,MAAO,EACPC,cAAe,IAOfG,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,SACjBC,mBAAoB,IACpBC,eAAe,qBACfC,aAAa,wBACbC,UAAU,+BAETC,EAAUC,KAAI,SAAAC,GAAK,OAChB,kBAAC,EAAD,CAAWrC,SAAUqC,EAAOC,IAAKD,EAAME,UCxBxCC,MATf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00d69c3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NavHeader.scss';\r\n\r\nfunction NavHeader() {\r\n    return (\r\n        <div className='header'>\r\n            <i className='fas fa-film fa-2x' />\r\n            <span className='head-title'>Top Rated Movies !!</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavHeader;","import React, { Component } from 'react';\r\nimport './MovieCard.scss';\r\nimport { MovieCardProps } from '../MovieCard/MovieCardProps';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\nimport { MovieCardStates } from '../MovieCard/MovieCardStates';\r\n\r\nclass MovieCard extends Component<MovieCardProps, MovieCardStates> {\r\n\r\n    constructor(props: Readonly<MovieCardProps>) {\r\n        super(props);\r\n        this.state = {\r\n            rating: props.cardData.rating,\r\n        };\r\n    };\r\n\r\n    onStarClick(nextValue) {\r\n        this.setState({ rating: nextValue });\r\n    }\r\n\r\n    render() {\r\n        const { cardData } = this.props;\r\n        const { rating } = this.state;\r\n        return (\r\n            <div className=\"card-container\">\r\n                <div className='slideme'>\r\n                    <img className='movie-image' src={cardData.imageUrl} alt={cardData.title} />\r\n                    <div className=\"movie-info\">\r\n                        <div className='movie-title'>{cardData.title}</div>\r\n                        <div className='movie-subtitle'>{cardData.subtitle}</div>\r\n                        <div className='movie-description'>{cardData.description}</div>\r\n                    </div>\r\n                    <div className=\"rating-comp\">\r\n                        <div className=\"rate-box\">\r\n                            <StarRatingComponent\r\n                                name=\"rate1\"\r\n                                starCount={5}\r\n                                emptyStarColor={'#ccc'}\r\n                                value={rating}\r\n                                onStarClick={this.onStarClick.bind(this)}\r\n                            />\r\n                            <div className=\"rating-num\">{rating}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport './CardContainer.scss';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport movieList from '../../mocks/movieList.json';\r\n\r\nfunction CardContainer() {\r\n    const responsive = {\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 1024 },\r\n            items: 3,\r\n            slidesToSlide: 1\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 1024, min: 464 },\r\n            items: 2,\r\n            slidesToSlide: 1\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 464, min: 0 },\r\n            items: 1,\r\n            slidesToSlide: 1\r\n        }\r\n    };\r\n    return (\r\n        <Carousel\r\n            showDots={true}\r\n            responsive={responsive}\r\n            infinite={true}\r\n            keyBoardControl={true}\r\n            customTransition=\"all .5\"\r\n            transitionDuration={500}\r\n            containerClass=\"carousel-container\"\r\n            dotListClass=\"custom-dot-list-style\"\r\n            itemClass=\"carousel-item-padding-40-px\"\r\n        >\r\n            {movieList.map(movie => (\r\n                <MovieCard cardData={movie} key={movie.id} />\r\n            ))}\r\n        </Carousel>\r\n    );\r\n}\r\n\r\nexport default CardContainer;","import React from 'react';\nimport './App.scss';\nimport NavHeader from './components/NavHeader/NavHeader';\nimport CardContainer from './components/CardContainer/CardContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavHeader />\n      <CardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}